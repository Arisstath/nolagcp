package me.arisstath.cp.obj.srv;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Scanner;

import com.google.common.escape.Escaper;
import com.google.common.escape.Escapers;

import me.arisstath.cp.Main;
import me.arisstath.cp.Main.LogType;
import me.arisstath.cp.obj.usr.NoLagCustomer;
import me.arisstath.cp.utils.RuntimeUtils;

public class MinecraftServer {

	public String directory, ID, name, username, node, ram, ip, port, serverjar, worldname = "";
	int pid = 0;
	int serviceid = 0;
	Process p = null;
	NoLagCustomer customer;
	ServerProcess sp;
	String ftpusername, ftppass;
	long maxDiskMB = 1024;
	boolean autoSave;
	boolean autoRestart;
	public ServerStatus status = ServerStatus.STOPPED;
	ServerPropertiesParser sParser;

	public enum ServerStatus {
		STOPPED, BOOTING, STARTED, STOPPING;
	}

	public MinecraftServer(String directory, String iD, String name, String username, String ram, String ip,
			String port, String serverjar, boolean autosave, boolean autoRestart) {

		ID = iD;
		this.name = name;
		this.username = username;
		this.ram = ram;
		this.ip = ip;
		this.port = port;
		this.serverjar = serverjar;
		this.autoSave = autosave;
		this.autoRestart = autoRestart;
		this.directory = "/home/mc_" + ID + "/";
	}
	public static final Escaper SHELL_ESCAPE;
    static {
        final Escapers.Builder builder = Escapers.builder();
        builder.addEscape('\'', "'\"'\"'");
        SHELL_ESCAPE = builder.build();
    }
	private void executeBash(String cmd) throws Exception {
		String[] cmdd = { "/bin/bash", "-c", cmd };
		Process pb = Runtime.getRuntime().exec(cmdd);

		String line;
		BufferedReader input = new BufferedReader(new InputStreamReader(pb.getInputStream()));
		while ((line = input.readLine()) != null) {
			Main.log(line, LogType.DEBUG);
		}
		input.close();
	}

	public void kill() {
		try {
			executeBash("kill -9 $(lsof -i:" + port + " -t)");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void start() {
		try {
			File dir = new File("/home/mc_" + ID);
			if (!dir.exists()) {
				dir.mkdirs();
			}
			// Check if user exists
			String linuxUser = "mc_" + ID;
			if (!RuntimeUtils.linuxUserExists("mc_" + ID)) {
				executeBash("useradd " + linuxUser);
				executeBash("usermod -a -G panel " + linuxUser);
			}
			if (!new File("/var/www").exists()) {
				executeBash("mkdir /var/www");
			}
			executeBash("chown -R root:root /var/www");
			executeBash("chmod -R 755 /var/www");

			// Always set home dir, cuz u never know
			executeBash("usermod -m -d /home/" + linuxUser + "/");

			// always secure the dir
			executeBash("chown -R " + linuxUser + ":" + linuxUser + " /home/" + linuxUser + "/");
			executeBash("chmod go-rwx /home/" + linuxUser + "/ /home/" + linuxUser + "/");

			// idk but some users change their listening port, kill everything
			// running on the specific port
			kill();
			setStatus(ServerStatus.BOOTING);

			PrintWriter writer = new PrintWriter(new File(directory + "eula.txt"));
			writer.println("eula=true");
			writer.close();

			/*
			 * URL website = new
			 * URL("https://www.nolag.host/static/nolagagent.jar");
			 * ReadableByteChannel rbc =
			 * Channels.newChannel(website.openStream()); FileOutputStream fos =
			 * new FileOutputStream(directory + "nolagagent.jar");
			 * fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
			 * fos.close();
			 */
			// set server's shit, for vanilla and other
			String properties = "";
			if (new File(directory + "server.properties").exists()) {
				Scanner scanner = new Scanner(new File(directory + "server.properties"));
				boolean portt = false;
				boolean ipp = false;
				while (scanner.hasNextLine()) {
					String line = scanner.nextLine();
					// System.out.println(line);
					if (line.startsWith("server-ip=")) {
						properties += "server-ip=" + ip + "\n";
						ipp = true;
						continue;
					}
					if (line.startsWith("server-port=")) {
						properties += "server-port=" + port + "\n";
						portt = true;
						continue;
					}
					properties += line + "\n";
				}
				if (!ipp) {
					properties += "server-ip=" + ip + "\n";
				}
				if (!portt) {
					properties += "server-port=" + port + "\n";
				}
			} else {
				// It seems like that minecraft won't append the default
				// settings if the file exists
				properties = "#Generated by NoLagCP";
				properties += "\nserver-ip=" + ip + "\nserver-port=" + port; // ip
																				// &
																				// port
				properties += "\nspawn-protection=16";
				properties += "\ngenerator-settings=";
				properties += "\nforce-gamemode=false";
				properties += "\nallow-nether=true";
				properties += "\ngamemode=0";
				properties += "\nbroadcast-console-to-ops=true";
				properties += "\nenable-query=false";
				properties += "\nplayer-idle-timeout=0";
				properties += "\ndifficulty=1";
				properties += "\nspawn-monsters=true";
				properties += "\nop-permission-level=4";
				properties += "\nresource-pack-hash=";
				properties += "\nannounce-player-achievements=true";
				properties += "\npvp=true";
				properties += "\nsnooper-enabled=true";
				properties += "\nlevel-type=DEFAULT";
				properties += "\nhardcore=false";
				properties += "\nenable-command-block=false";
				properties += "\nmax-players=20";
				properties += "\nnetwork-compression-threshold=256";
				properties += "\nmax-world-size=29999984";
				properties += "\ndebug=false";
				properties += "\nspawn-npcs=true";
				properties += "\nallow-flight=false";
				properties += "\nlevel-name=world";
				properties += "\nview-distance=10";
				properties += "\nresource-pack=";
				properties += "\nspawn-animals=true";
				properties += "\nwhite-list=false";
				properties += "\ngenerate-structures=true";
				properties += "\nonline-mode=false";
				properties += "\nmax-build-height=256";
				properties += "\nlevel-seed=";
				properties += "\nenable-rcon=false";
				properties += "\nmotd=A Minecraft Server hosted by NoLag.host";
			}
			writer = new PrintWriter(new File(directory + "server.properties"));
			writer.write(properties);
			writer.close();
			// server is already running
			if (RuntimeUtils.getScreenServerPID(Integer.parseInt(ID)) != -1) {
				return;
			}
			// Make the .sh file
			writer = new PrintWriter(new File("/var/www/mc_" + ID + ".sh"));
			writer.println("cd /home/mc_" + ID);
			writer.println("su - " + linuxUser + " -c 'java -Xmx" + ram + "M -jar server.jar -host " + ip + " -port "
					+ port + " > /home/mc_" + ID + "/nolagcp/output.log" + "'");
			writer.close();
			
			ProcessBuilder builder = new ProcessBuilder("/bin/bash", "-c",
					"/usr/bin/screen -dmS mc_" + ID + " bash /var/www/mc_" + ID + ".sh");
			System.out.println("Starting as " + "/usr/bin/screen -dmS mc_" + ID + " bash /var/www/mc_" + ID + ".sh");
			new File(getDirectory() + "/nolagcp").mkdirs();
			File ff = new File(getDirectory() + "/nolagcp/output.log");
			if (ff.exists()) {
				ff.delete();
			}
			ff = new File(getDirectory() + "/nolagcp/output.log");
			PrintWriter writerr = new PrintWriter(ff);
			writerr.println("[DAEMON] Starting server with " + ram + "MB of RAM.");
			writerr.close();
			
			executeBash("chmod 777 /home/" + linuxUser + "/nolagcp/output.log");
			builder.directory(new File(directory));
			builder.redirectOutput(ff);
			builder.redirectError(ff);
			// p = builder.start();
			builder.start();
			setStatus(ServerStatus.STARTED);
			log("Starting server with " + ram + " MB of RAM.");
			if (autoSave) {
				log("\nAuto-Saving has been enabled. Save-All command will be executed every 5 minutes.");
			}
			pid = RuntimeUtils.getScreenServerPID(Integer.parseInt(ID));
			log("\nYour server PID is " + pid);
			sParser = new ServerPropertiesParser(new File(directory + "server.properties"));
		} catch (Exception ex) {
			setStatus(ServerStatus.STOPPED);
			ex.printStackTrace();
		}
	}

	public void start_old() {
		try {
			// Check if user exists
			String linuxUser = "";
			if (!RuntimeUtils.linuxUserExists(username)) {
				executeBash("useradd " + username);
				executeBash("usermod -a -G panel " + username);
			}
			// Always set home dir, cuz u never know
			executeBash("usermod -m -d /home/" + username + "/");

			// always secure the dir
			executeBash("chown -R " + username + ":" + username + " /home/" + username + "/");
			executeBash("chmod go-rwx /home/" + username + "/ /home/" + username + "/");

			// idk but some users change their listening port, kill everything
			// running on the specific port
			kill();
			setStatus(ServerStatus.BOOTING);

			PrintWriter writer = new PrintWriter(new File(directory + "eula.txt"));
			writer.println("eula=true");
			writer.close();

			/*
			 * URL website = new
			 * URL("https://www.nolag.host/static/nolagagent.jar");
			 * ReadableByteChannel rbc =
			 * Channels.newChannel(website.openStream()); FileOutputStream fos =
			 * new FileOutputStream(directory + "nolagagent.jar");
			 * fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
			 * fos.close();
			 */
			// set server's shit, for vanilla and other
			String properties = "";
			if (new File(directory + "server.properties").exists()) {
				Scanner scanner = new Scanner(new File(directory + "server.properties"));
				boolean portt = false;
				boolean ipp = false;
				while (scanner.hasNextLine()) {
					String line = scanner.nextLine();
					// System.out.println(line);
					if (line.startsWith("server-ip=")) {
						properties += "server-ip=" + ip + "\n";
						ipp = true;
						continue;
					}
					if (line.startsWith("server-port=")) {
						properties += "server-port=" + port + "\n";
						portt = true;
						continue;
					}
					properties += line + "\n";
				}
				if (!ipp) {
					properties += "server-ip=" + ip + "\n";
				}
				if (!portt) {
					properties += "server-port=" + port + "\n";
				}
			} else {
				// It seems like that minecraft won't append the default
				// settings if the file exists
				properties = "#Generated by NoLagCP";
				properties += "\nserver-ip=" + ip + "\nserver-port=" + port; // ip
																				// &
																				// port
				properties += "\nspawn-protection=16";
				properties += "\ngenerator-settings=";
				properties += "\nforce-gamemode=false";
				properties += "\nallow-nether=true";
				properties += "\ngamemode=0";
				properties += "\nbroadcast-console-to-ops=true";
				properties += "\nenable-query=false";
				properties += "\nplayer-idle-timeout=0";
				properties += "\ndifficulty=1";
				properties += "\nspawn-monsters=true";
				properties += "\nop-permission-level=4";
				properties += "\nresource-pack-hash=";
				properties += "\nannounce-player-achievements=true";
				properties += "\npvp=true";
				properties += "\nsnooper-enabled=true";
				properties += "\nlevel-type=DEFAULT";
				properties += "\nhardcore=false";
				properties += "\nenable-command-block=false";
				properties += "\nmax-players=20";
				properties += "\nnetwork-compression-threshold=256";
				properties += "\nmax-world-size=29999984";
				properties += "\ndebug=false";
				properties += "\nspawn-npcs=true";
				properties += "\nallow-flight=false";
				properties += "\nlevel-name=world";
				properties += "\nview-distance=10";
				properties += "\nresource-pack=";
				properties += "\nspawn-animals=true";
				properties += "\nwhite-list=false";
				properties += "\ngenerate-structures=true";
				properties += "\nonline-mode=false";
				properties += "\nmax-build-height=256";
				properties += "\nlevel-seed=";
				properties += "\nenable-rcon=false";
				properties += "\nmotd=A Minecraft Server hosted by NoLag.host";
			}
			writer = new PrintWriter(new File(directory + "server.properties"));
			writer.write(properties);
			writer.close();
			// server is already running
			if (p != null /*
							 * && RuntimeUtils.isProcessRunning(pid, 5,
							 * TimeUnit.SECONDS )
							 */) {
				return;
			} else {
				// server is dead
				// p.destroyForcibly();
				p = null;
			}

			// Auto-Accept eula, no need

			// create a screen and start it
			// String[] args = {"screen", "-A", "-m", "-d", "-S", ID, "java",
			// "-Dcom.mojang.eula.agree=true", "-Xmx" + ram,"-jar", directory +
			// serverjar};

			// ProcessBuilder builder = new ProcessBuilder("/bin/bash","-c",
			// "runuser", "java", "-Dcom.mojang.eula.agree=true", "-Xmx" + ram +
			// "M",
			// "-jar", directory + serverjar, "-host", ip, "-port", port);
			// System.out.println("runuser -l " + username + " -c 'java
			// -Dcom.mojang.eula.agree=true -Xmx" + ram
			// + "M -jar " + directory + serverjar + " -host " + ip + " -port "
			// + port + "'");
			ProcessBuilder builder = new ProcessBuilder("/bin/bash", "-c",
					"runuser -l " + username + " -c 'cd /home/" + username + "/" + ID + "/ && java -Xmx" + ram
							+ "M -jar " + directory + serverjar + " -host " + ip + " -port " + port + "'");
			new File(getDirectory() + "/nolagcp").mkdirs();
			File ff = new File(getDirectory() + "/nolagcp/output.log");
			if (ff.exists()) {
				ff.delete();
			}
			ff = new File(getDirectory() + "/nolagcp/output.log");
			PrintWriter writerr = new PrintWriter(ff);
			writerr.println("[DAEMON] Starting server with " + ram + "MB of RAM.");
			writerr.close();

			builder.directory(new File(directory));
			builder.redirectOutput(ff);
			builder.redirectError(ff);
			p = builder.start();

			setStatus(ServerStatus.STARTED);
			log("Starting server with " + ram + " MB of RAM.");
			if (autoSave) {
				log("\nAuto-Saving has been enabled. Save-All command will be executed every 5 minutes.");
			}
			pid = RuntimeUtils.getScreenServerPID(Integer.parseInt(ID));
			log("\nYour server PID is " + pid);
			sParser = new ServerPropertiesParser(new File(directory + "server.properties"));
		} catch (Exception ex) {
			setStatus(ServerStatus.STOPPED);
			ex.printStackTrace();
		}
	}

	public void log(String text) {
		try {
			Files.write(Paths.get(getDirectory() + "/nolagcp/output.log"), ("[DAEMON] " + text).getBytes(),

					StandardOpenOption.APPEND);
		} catch (Exception ex) {
		}
	}

	public void sendCommand(String command) {
		if (RuntimeUtils.getScreenServerPID(Integer.parseInt(ID)) != -1) {
			try {
				executeBash("screen -S mc_" + ID + " -p 0 -X stuff '" + SHELL_ESCAPE.escape(command) + "'`echo -ne '\015'`");
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		// writer.close(); seems that if u call this the fking shit,it closes
		// console input and u can never run cmds again rip
	}

	public void sendCommand_old(String command) {
		if (p == null) { // U FUCKED UP USER
			return;
		}
		PrintWriter writer = new PrintWriter(p.getOutputStream());
		writer.write(command);
		writer.write("\n");
		writer.flush();
		// writer.close(); seems that if u call this the fking shit,it closes
		// console input and u can never run cmds again rip
	}

	public void announceInstall() {
	}

	public void stop(boolean soft) {
		if (soft) {
			sendCommand("stop");
			sendCommand("end");
			return;
		}
		ServerStatus prev = getStatus();
		if (getStatus() == ServerStatus.STOPPED || getStatus() == ServerStatus.STOPPING) {
			return;
		}
		setStatus(ServerStatus.STOPPING);
		log("Killing server process.");
		try {
			if (p != null) {
				p.destroyForcibly();
			}
			int screenPID = RuntimeUtils.getScreenServerPID(Integer.parseInt(ID));
			if (screenPID != -1) {
				executeBash("kill -9 " + screenPID);
			}
			executeBash("screen -wipe");
			setStatus(ServerStatus.STOPPED);
			p = null;
			pid = 0;
		} catch (Exception e) {
			setStatus(prev);
			e.printStackTrace();
		}
		kill();
		Main.getServersList().removeServer(this);
	}

	public int getServiceid() {
		return serviceid;
	}

	public void setServiceid(int serviceid) {
		this.serviceid = serviceid;
	}

	public String getDirectory() {
		return directory;
	}

	public void setDirectory(String directory) {
		this.directory = directory;
	}

	public ServerPropertiesParser getParser() {
		return sParser;
	}

	public String getID() {
		return ID;
	}

	public void setID(String iD) {
		ID = iD;
	}

	public String getFtpusername() {
		return ftpusername;
	}

	public void setFtpusername(String ftpusername) {
		this.ftpusername = ftpusername;
	}

	public String getFtppass() {
		return ftppass;
	}

	public void setFtppass(String ftppass) {
		this.ftppass = ftppass;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getNode() {
		return node;
	}

	public void setNode(String node) {
		this.node = node;
	}

	public String getRam() {
		return ram;
	}

	public void setRam(String ram) {
		this.ram = ram;
	}

	public String getIp() {
		return ip;
	}

	public void setIp(String ip) {
		this.ip = ip;
	}

	public String getPort() {
		return port;
	}

	public void setPort(String port) {
		this.port = port;
	}

	public String getServerjar() {
		return serverjar;
	}

	public void setServerjar(String serverjar) {
		this.serverjar = serverjar;
	}

	public String getWorldname() {
		return worldname;
	}

	public void setWorldname(String worldname) {
		this.worldname = worldname;
	}

	public int getPid() {
		return pid;
	}

	public void setPid(int pid) {
		this.pid = pid;
	}

	public Process getProcess() {
		return p;
	}

	public void setProcess(Process p) {
		this.p = p;
	}

	public ServerStatus getStatus() {
		return status;
	}

	public void setStatus(ServerStatus status) {
		Main.log("Server " + ID + " status has been changed from " + this.status + " to " + status, LogType.DEBUG);
		this.status = status;
	}

}
